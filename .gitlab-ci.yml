image: docker:stable

stages:
  - build
  - test
  - deploy

variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

build:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    #login to GitLab Container Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    # Pull previously pushed image, if it exists
    - docker pull $IMAGE:latest || true
    # build and tag the new image
    - docker build
      --cache-from $IMAGE:latest
      --tag $IMAGE:latest
      --file ./Dockerfile.prod
      "."
    # Push the image up to the GitLab Container registry
    - docker push $IMAGE:latest

# using the image we created in the build stage and Postgres service,
# pytest, Flake8, Black, and isort are ran in the test stage.
test:
  stage: test
  image: $IMAGE:latest
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: users
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: runner
    DATABASE_TEST_URL: postgresql://runner:runner@postgres:5432/users
  script:
    - pytest "src/tests" -p no:warnings
    - flake8 src
    - black src --check
    - isort src --check-only

deploy:
  stage: deploy
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: agile-dusk-62620
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  script:
    - apk add --no-cache curl
    - chmod +x ./release.sh
    - docker build
      --tag $HEROKU_REGISTRY_IMAGE
      --file ./Dockerfile.prod
      "."
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./release.sh
